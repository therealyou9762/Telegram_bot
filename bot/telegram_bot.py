import os
import logging
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from telegram_bot_calendar import DetailedTelegramCalendar
import feedparser

# Import from new modular structure
def get_news_functions():
    """Lazy import news functions to avoid circular imports"""
    try:
        from news.filter import filter_news
        from news.postprocessing import format_news_item_for_display
        from news.api import search_news
        return filter_news, format_news_item_for_display, search_news
    except ImportError:
        logger.error("Could not import news functions")
        return None, None, None

def get_database_functions():
    """Lazy import database functions to avoid circular imports"""
    try:
        from db.database import add_keyword, get_keywords, add_category, get_categories, add_news, get_news
        return add_keyword, get_keywords, add_category, get_categories, add_news, get_news
    except ImportError:
        logger.error("Could not import database functions")
        return None, None, None, None, None, None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

HEROKU_APP_NAME = os.getenv("HEROKU_APP_NAME", "telegr77-6209977497ad")
WEBHOOK_URL = f"https://{HEROKU_APP_NAME}.herokuapp.com/{TOKEN}"

NEWS_SOURCES = [
    # –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
    "https://www.bbc.com/news/world/rss.xml",
    "https://www.theguardian.com/world/rss",
    "https://www.independent.co.uk/news/world/rss",
    "https://feeds.skynews.com/feeds/rss/world.xml",

    # –ì–µ—Ä–º–∞–Ω–∏—è
    "https://www.spiegel.de/international/index.rss",
    "https://rss.sueddeutsche.de/rss/Politik",
    "https://www.dw.com/en/top-stories/s-9097/rss.xml",
    "https://www.tagesschau.de/xml/rss2/",

    # –§—Ä–∞–Ω—Ü–∏—è
    "https://www.france24.com/en/rss",
    "https://www.lemonde.fr/international/rss_full.xml",
    "https://www.rfi.fr/en/rss",

    # –ò—Ç–∞–ª–∏—è
    "https://www.ansa.it/sito/notizie/mondo/mondo_rss.xml",
    "https://www.ilpost.it/feed/",

    # –ò—Å–ø–∞–Ω–∏—è
    "https://english.elpais.com/rss/section/international/",
    "https://e00-elmundo.uecdn.es/elmundo/rss/internacional.xml",

    # –ü–æ–ª—å—à–∞
    "https://tvn24.pl/rss",
    "https://www.rp.pl/rss_main",
    "https://wiadomosci.onet.pl/rss",
    "https://www.polskieradio.pl/5/3/Rss",
    "https://www.rmf24.pl/rss",
    "https://www.radio.krakow.pl/rss.xml",

    # –í–µ–Ω–≥—Ä–∏—è
    "https://telex.hu/feed",
    "https://index.hu/24ora/rss",

    # –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
    "https://www.dutchnews.nl/feed/",
    "https://nos.nl/rss/alles.xml",

    # –ë–µ–ª—å–≥–∏—è
    "https://www.hln.be/rss.xml",
    "https://www.standaard.be/rss",
    "https://www.lesoir.be/feed/",
    "https://www.lalibre.be/rss",

    # –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è
    "https://www.publico.pt/rss",
    "https://expresso.pt/rss",
    "https://observador.pt/rss",

    # –ß–µ—Ö–∏—è
    "https://www.seznamzpravy.cz/rss",
    "https://denikn.cz/rss/",
    "https://zpravy.idnes.cz/rss.aspx",

    # –°–ª–æ–≤–∞–∫–∏—è
    "https://dennikn.sk/rss/",
    "https://www.sme.sk/rss",

    # –§–∏–Ω–ª—è–Ω–¥–∏—è
    "https://feeds.yle.fi/uutiset/v1/recent.rss?publisherIds=YLE_UUTISET",
    "https://www.hs.fi/rss/tuoreimmat.xml",

    # –®–≤–µ—Ü–∏—è
    "https://api.sr.se/api/rss/program/83?format=145",
    "https://www.svt.se/nyheter/rss.xml",

    # –î–∞–Ω–∏—è
    "https://www.dr.dk/nyheder/service/feeds/allenyheder",

    # –ù–æ—Ä–≤–µ–≥–∏—è
    "https://www.nrk.no/toppsaker.rss",
    "https://www.vg.no/rss/create.php?categories=1068,1069,1078",

    # –ò—Ä–ª–∞–Ω–¥–∏—è
    "https://www.rte.ie/news/rss/",
    "https://www.thejournal.ie/feed/",

    # –ë–æ–ª–≥–∞—Ä–∏—è
    "https://nova.bg/rss",
    "https://www.dnes.bg/rss.php",

    # –†—É–º—ã–Ω–∏—è
    "https://www.digi24.ro/rss",
    "https://www.hotnews.ro/rss",

    # –ì—Ä–µ—Ü–∏—è
    "https://www.in.gr/rss/",
    "https://www.protothema.gr/rss/news-international.xml",

    # –õ–∏—Ç–≤–∞, –õ–∞—Ç–≤–∏—è, –≠—Å—Ç–æ–Ω–∏—è (–ë–∞–ª—Ç–∏—è)
    "https://www.delfi.lt/rss/",
    "https://www.delfi.lv/rss/",
    "https://www.delfi.ee/rss/",
    "https://www.lrytas.lt/rss",
    "https://www.la.lv/feed",
    "https://www.postimees.ee/rss",

    # –•–æ—Ä–≤–∞—Ç–∏—è
    "https://www.jutarnji.hr/rss",
    "https://www.index.hr/rss",

    # –°–µ—Ä–±–∏—è
    "https://nova.rs/feed/",
    "https://www.blic.rs/rss",
    "https://informer.rs/rss",

    # –ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞
    "https://www.klix.ba/rss",
    "https://www.oslobodjenje.ba/feed",

    # –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è
    "https://www.vijesti.me/rss",

    # –°–ª–æ–≤–µ–Ω–∏—è
    "https://www.delo.si/rss/",

    # –ê–ª–±–∞–Ω–∏—è
    "https://gazeta-shqip.com/feed/",

    # –°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è
    "https://novamakedonija.com.mk/feed/",

    # –ö–∏–ø—Ä
    "https://www.philenews.com/rss/",
    "https://www.politis.com.cy/feed/",

    # –ú–∞–ª—å—Ç–∞
    "https://timesofmalta.com/rss",

    # –õ—é–∫—Å–µ–º–±—É—Ä–≥
    "https://www.wort.lu/en/rss",

    # –£–∫—Ä–∞–∏–Ω–∞ (–≥–ª–∞–≤–Ω—ã–µ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ª–µ–Ω—Ç—ã)
    "https://www.ukrinform.ua/rss/rss.php",
    "https://www.pravda.com.ua/eng/rss/",
    "https://www.liga.net/rss", 
    "https://censor.net/rss",
    "https://www.eurointegration.com.ua/rss.xml",
    "https://novayagazeta.eu/rss",
    "https://www.euronews.com/rss?level=theme&name=ukraine-crisis",

    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ (—á–∞—Å—Ç–æ –ø—É–±–ª–∏–∫—É—é—Ç –ø—Ä–æ –£–∫—Ä–∞–∏–Ω—É)
    "https://www.politico.eu/feed/",
    "https://www.eurotopics.net/en/rss.xml",
    "https://feeds.nova.bg/news/world/rss.xml",
]

PERIOD, CALENDAR_START, CALENDAR_END, KEYWORDS = range(4)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://{HEROKU_APP_NAME}.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîë <b>/add_keyword</b> —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "üìã <b>/list_keywords</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "üìÇ <b>/add_category</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "üóÇÔ∏è <b>/list_categories</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "üì∞ <b>/news</b> ‚Äî –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "üåê <b>/site</b> ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_keyword_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keyword <—Å–ª–æ–≤–æ> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    word, category = context.args[0], " ".join(context.args[1:])
    
    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    if add_keyword:
        add_keyword(word, category)
        await update.message.reply_text(
            f"üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <b>{word}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>.", parse_mode='HTML')
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def list_keywords_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    if not get_keywords:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    keywords = get_keywords()
    if not keywords:
        await update.message.reply_text("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{kw['word']}</b> ‚Äî {kw['category']}" for kw in keywords])
    user_id = update.effective_user.id
    url = f"https://{HEROKU_APP_NAME}.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üìã –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_category_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    name = " ".join(context.args)
    
    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    if add_category:
        add_category(name)
        await update.message.reply_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", parse_mode='HTML')
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def list_categories_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    if not get_categories:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    categories = get_categories()
    if not categories:
        await update.message.reply_text("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{cat['name']}</b>" for cat in categories])
    user_id = update.effective_user.id
    url = f"https://{HEROKU_APP_NAME}.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üóÇÔ∏è –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def site_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://{HEROKU_APP_NAME}.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåê –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º:",
        reply_markup=reply_markup
    )

# --- –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ---
async def news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="3days")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ", callback_data="calendar")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=reply_markup)
    return PERIOD

async def period_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['period'] = query.data

    if query.data == "calendar":
        calendar, step = DetailedTelegramCalendar(min_date=datetime.date(2020,1,1)).build()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:", reply_markup=calendar)
        return CALENDAR_START
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS

async def calendar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result, key, step = DetailedTelegramCalendar().process(update.callback_query.data)
    if not result and key:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:", reply_markup=key)
        return CALENDAR_START
    elif result:
        context.user_data['start_date'] = result
        calendar, step = DetailedTelegramCalendar().build()
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", reply_markup=calendar)
        return CALENDAR_END

async def calendar_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result, key, step = DetailedTelegramCalendar().process(update.callback_query.data)
    if not result and key:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", reply_markup=key)
        return CALENDAR_END
    elif result:
        context.user_data['end_date'] = result
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS

async def keywords_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
    context.user_data['keywords'] = keywords

    period = context.user_data.get('period')
    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')

    today = datetime.datetime.now(datetime.UTC).date()
    if period == "today":
        start_date = end_date = today
    elif period == "3days":
        end_date = today
        start_date = end_date - datetime.timedelta(days=2)
    elif period == "week":
        end_date = today
        start_date = end_date - datetime.timedelta(days=6)
    # –î–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è start_date, end_date —É–∂–µ –∑–∞–¥–∞–Ω—ã

    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    filter_news, format_news_item_for_display, search_news = get_news_functions()
    
    if not get_news or not filter_news or not format_news_item_for_display:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return ConversationHandler.END

    news_items = get_news()
    filtered_news = filter_news(start_date, end_date, keywords, news_items)

    if not filtered_news:
        await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        return ConversationHandler.END

    for item in filtered_news[:10]:
        msg = format_news_item_for_display(item)
        await update.message.reply_text(msg, parse_mode="HTML")
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("news", news_cmd)],
    states={
        PERIOD: [CallbackQueryHandler(period_chosen)],
        CALENDAR_START: [CallbackQueryHandler(calendar_start)],
        CALENDAR_END: [CallbackQueryHandler(calendar_end)],
        KEYWORDS: [MessageHandler(filters.TEXT & (~filters.COMMAND), keywords_chosen)],
    },
    fallbacks=[],
)

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å ---
async def scheduled_news_job(context):
    add_keyword, get_keywords, add_category, get_categories, add_news, get_news = get_database_functions()
    filter_news, format_news_item_for_display, search_news = get_news_functions()
    
    if not get_keywords or not search_news or not add_news:
        return
        
    kw_list = [kw['word'] for kw in get_keywords()]
    all_news = search_news(kw_list)
    for src in NEWS_SOURCES:
        feed = feedparser.parse(src)
        for entry in feed.entries:
            for kw in kw_list:
                if kw.lower() in (entry.title + entry.get('summary', '')).lower():
                    news_item = {
                        "title": entry.title,
                        "url": entry.link,
                        "description": entry.get("summary", ""),
                        "category": entry.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        "published_at": entry.get("published", ""),
                    }
                    add_news(
                        news_item['title'],
                        news_item['url'],
                        news_item.get('description', ''),
                        news_item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                        news_item['published_at']
                    )
                    break

async def start_news_scheduler(application):
    application.job_queue.run_repeating(scheduled_news_job, interval=3600, first=0)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_keyword", add_keyword_cmd))
    app.add_handler(CommandHandler("list_keywords", list_keywords_cmd))
    app.add_handler(CommandHandler("add_category", add_category_cmd))
    app.add_handler(CommandHandler("list_categories", list_categories_cmd))
    app.add_handler(CommandHandler("site", site_cmd))
    app.add_handler(conv_handler)
    app.post_init = start_news_scheduler

    logger.info("Starting bot via webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()