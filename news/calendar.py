from telegram_bot_calendar import DetailedTelegramCalendar
import datetime

# ... (—Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç –∏ setup)

CALENDAR_START, CALENDAR_END, KEYWORDS = range(3)

async def news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="3days")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ", callback_data="calendar")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=reply_markup)
    return PERIOD

async def period_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['period'] = query.data

    if query.data == "calendar":
        calendar, step = DetailedTelegramCalendar(min_date=datetime.date(2020,1,1)).build()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:", reply_markup=calendar)
        return CALENDAR_START
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS

async def calendar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result, key, step = DetailedTelegramCalendar().process(update.callback_query.data)
    if not result and key:
        await update.callback_query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:", reply_markup=key)
        return CALENDAR_START
    elif result:
        context.user_data['start_date'] = result
        calendar, step = DetailedTelegramCalendar().build()
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", reply_markup=calendar)
        return CALENDAR_END

async def calendar_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result, key, step = DetailedTelegramCalendar().process(update.callback_query.data)
    if not result and key:
        await update.callback_query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", reply_markup=key)
        return CALENDAR_END
    elif result:
        context.user_data['end_date'] = result
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS

async def keywords_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
    context.user_data['keywords'] = keywords

    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')
    news_items = filter_news(start_date, end_date, keywords)

    if not news_items:
        await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        return ConversationHandler.END

    for item in news_items[:10]:
        msg = (
            f"<b>{item['title']}</b>\n{item.get('description','')}\n"
            f"<a href=\"{item['url']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
            f"–î–∞—Ç–∞: {item.get('published_at','')}\n"
        )
        await update.message.reply_text(msg, parse_mode="HTML")
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("news", news_cmd)],
    states={
        PERIOD: [
            CallbackQueryHandler(period_chosen),
        ],
        CALENDAR_START: [
            CallbackQueryHandler(calendar_start, per_message=True)
        ],
        CALENDAR_END: [
            CallbackQueryHandler(calendar_end, per_message=True)
        ],
        KEYWORDS: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), keywords_chosen)
        ],
    },
    fallbacks=[],
)
