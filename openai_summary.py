import os
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
from database import add_keyword, get_keywords, add_category, get_categories, add_news, get_news
from webz_api import search_news

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /add_keyword, /get_news, /list_keywords, /list_categories."
    )

async def add_keyword_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keyword <–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    word, category = context.args[0], " ".join(context.args[1:])
    add_keyword(word, category)
    await update.message.reply_text(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")

async def list_keywords_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keywords = get_keywords()
    if not keywords:
        await update.message.reply_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"{kw['word']} ‚Äî {kw['category']}" for kw in keywords])
    await update.message.reply_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + msg)

async def add_category_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    name = " ".join(context.args)
    add_category(name)
    await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def list_categories_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()
    if not categories:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([cat['name'] for cat in categories])
    await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + msg)

async def get_news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keywords = get_keywords()
    if not keywords:
        await update.message.reply_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    kw_list = [kw['word'] for kw in keywords]
    news_list = search_news(kw_list)
    if not news_list:
        await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for news in news_list:
        add_news(news['title'], news['url'], news['summary'], news.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'), news['published_at'])
        msg = f"üì∞ <b>{news['title']}</b>\n{news['summary']}\n<a href='{news['url']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
        await update.message.reply_html(msg)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_keyword", add_keyword_cmd))
    app.add_handler(CommandHandler("list_keywords", list_keywords_cmd))
    app.add_handler(CommandHandler("add_category", add_category_cmd))
    app.add_handler(CommandHandler("list_categories", list_categories_cmd))
    app.add_handler(CommandHandler("get_news", get_news_cmd))
    app.run_polling()

if __name__ == "__main__":
    main()
