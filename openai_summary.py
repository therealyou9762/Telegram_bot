import os
import logging
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import feedparser

from database import add_keyword, get_keywords, add_category, get_categories, add_news, get_news
from newsapi import search_news

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

NEWS_SOURCES = [
    "https://www.ukrinform.ua/rss/rss.php",
    "https://www.bbc.com/news/world/rss.xml",
    "https://www.france24.com/en/rss",
    # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîë <b>/add_keyword</b> —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "üìã <b>/list_keywords</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "üìÇ <b>/add_category</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "üóÇÔ∏è <b>/list_categories</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "üì∞ <b>/news</b> —Å–ª–æ–≤–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "üåê <b>/site</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏\n\n"
        "–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_keyword_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keyword <—Å–ª–æ–≤–æ> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    word, category = context.args[0], " ".join(context.args[1:])
    add_keyword(word, category)
    await update.message.reply_text(f"üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <b>{word}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>.", parse_mode='HTML')

async def list_keywords_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keywords = get_keywords()
    if not keywords:
        await update.message.reply_text("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{kw['word']}</b> ‚Äî {kw['category']}" for kw in keywords])
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üìã –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_category_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    name = " ".join(context.args)
    add_category(name)
    await update.message.reply_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", parse_mode='HTML')

async def list_categories_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()
    if not categories:
        await update.message.reply_text("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{cat['name']}</b>" for cat in categories])
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üóÇÔ∏è –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        kw_list = context.args if context.args else [kw['word'] for kw in get_keywords()]
        all_news = []

        # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
        api_news = search_news(kw_list)
        all_news.extend(api_news)

        # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        for src in NEWS_SOURCES:
            feed = feedparser.parse(src)
            for entry in feed.entries:
                for kw in kw_list:
                    if kw.lower() in (entry.title + entry.get('summary', '')).lower():
                        news_item = {
                            "title": entry.title,
                            "url": entry.link,
                            "description": entry.get("summary", ""),
                            "category": entry.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                            "published_at": entry.get("published", ""),
                        }
                        all_news.append(news_item)
                        break

        if not all_news:
            await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for news in all_news:
            add_news(
                news['title'],
                news['url'],
                news.get('description', ''),
                news.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                news['published_at']
            )
            message = (
                f"<b>{news['title']}</b>\n"
                f"{news.get('description', '')}\n"
                f"<a href=\"{news['url']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
                f"–î–∞—Ç–∞: {news['published_at']}\n"
            )
            await update.message.reply_text(message, parse_mode='HTML')

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ news_cmd")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

async def site_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåê –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º:",
        reply_markup=reply_markup
    )

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å ---
async def scheduled_news_job(context):
    kw_list = [kw['word'] for kw in get_keywords()]
    all_news = search_news(kw_list)
    for src in NEWS_SOURCES:
        feed = feedparser.parse(src)
        for entry in feed.entries:
            for kw in kw_list:
                if kw.lower() in (entry.title + entry.get('summary', '')).lower():
                    news_item = {
                        "title": entry.title,
                        "url": entry.link,
                        "description": entry.get("summary", ""),
                        "category": entry.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        "published_at": entry.get("published", ""),
                    }
                    add_news(
                        news_item['title'],
                        news_item['url'],
                        news_item.get('description', ''),
                        news_item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                        news_item['published_at']
                    )
                    break

async def start_news_scheduler(application):
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Ä–∞–∑ –≤ —á–∞—Å —á–µ—Ä–µ–∑ job_queue (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    application.job_queue.run_repeating(scheduled_news_job, interval=3600, first=0)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_keyword", add_keyword_cmd))
    app.add_handler(CommandHandler("list_keywords", list_keywords_cmd))
    app.add_handler(CommandHandler("add_category", add_category_cmd))
    app.add_handler(CommandHandler("list_categories", list_categories_cmd))
    app.add_handler(CommandHandler("news", news_cmd))
    app.add_handler(CommandHandler("site", site_cmd))
    # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π post_init!
 app.post_init = start_news_scheduler
    logger.info("Starting bot polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
