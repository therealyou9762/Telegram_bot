import os
import logging
import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler,
    CallbackQueryHandler, MessageHandler, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import feedparser

from database import add_keyword, get_keywords, add_category, get_categories, add_news, get_news
from newsapi import search_news

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

NEWS_SOURCES = [
    "https://www.ukrinform.ua/rss/rss.php",
    "https://www.bbc.com/news/world/rss.xml",
    "https://www.france24.com/en/rss",
    # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

PERIOD, KEYWORDS = range(2)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîë <b>/add_keyword</b> —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "üìã <b>/list_keywords</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "üìÇ <b>/add_category</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "üóÇÔ∏è <b>/list_categories</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "üì∞ <b>/news</b> —Å–ª–æ–≤–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "üåê <b>/site</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏\n\n"
        "–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_keyword_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keyword <—Å–ª–æ–≤–æ> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    word, category = context.args[0], " ".join(context.args[1:])
    add_keyword(word, category)
    await update.message.reply_text(f"üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <b>{word}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>.", parse_mode='HTML')

async def list_keywords_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keywords = get_keywords()
    if not keywords:
        await update.message.reply_text("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{kw['word']}</b> ‚Äî {kw['category']}" for kw in keywords])
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üìã –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def add_category_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>")
        return
    name = " ".join(context.args)
    add_category(name)
    await update.message.reply_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", parse_mode='HTML')

async def list_categories_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()
    if not categories:
        await update.message.reply_text("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = "\n".join([f"‚Ä¢ <b>{cat['name']}</b>" for cat in categories])
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üóÇÔ∏è –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{msg}",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def site_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = f"https://telegr77-6209977497ad.herokuapp.com/?user_id={user_id}"
    keyboard = [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåê –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º:",
        reply_markup=reply_markup
    )

# --- –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---
async def news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", callback_data="3days")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="custom")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=reply_markup)
    return PERIOD

async def period_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['period'] = query.data

    if query.data == "custom":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î - –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-10 - 2025-09-17):")
        return PERIOD
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS

async def custom_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        start_str, end_str = map(str.strip, text.split('-'))
        start_date = datetime.datetime.strptime(start_str, "%Y-%m-%d").date()
        end_date = datetime.datetime.strptime(end_str, "%Y-%m-%d").date()
        context.user_data['custom_range'] = (start_date, end_date)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return KEYWORDS
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-10 - 2025-09-17):")
        return PERIOD

async def keywords_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keywords = [kw.strip() for kw in text.split(',') if kw.strip()]
    context.user_data['keywords'] = keywords

    period = context.user_data.get('period')
    custom_range = context.user_data.get('custom_range')

    start_date, end_date = get_period_dates(period, custom_range)
    news_items = filter_news(start_date, end_date, keywords)

    if not news_items:
        await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        return ConversationHandler.END

    for item in news_items[:10]:  # –≤—ã–≤–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º 10 –Ω–æ–≤–æ—Å—Ç–µ–π
        msg = (
            f"<b>{item['title']}</b>\n{item.get('description','')}\n"
            f"<a href=\"{item['url']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
            f"–î–∞—Ç–∞: {item.get('published_at','')}\n"
        )
        await update.message.reply_text(msg, parse_mode="HTML")
    return ConversationHandler.END

def get_period_dates(period, custom_range=None):
    today = datetime.datetime.utcnow().date()
    if period == "today":
        return today, today
    elif period == "3days":
        return today - datetime.timedelta(days=2), today
    elif period == "week":
        return today - datetime.timedelta(days=6), today
    elif period == "custom" and custom_range:
        return custom_range
    else:
        return today, today

def filter_news(start_date, end_date, keywords):
    # –ó–¥–µ—Å—å –±–µ—Ä–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î (–∏–ª–∏ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
    result = []
    for news in get_news():  # get_news –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –Ω–æ–≤–æ—Å—Ç–µ–π
        try:
            pub_dt = news.get('published_at', '')
            if isinstance(pub_dt, str):
                pub_dt = datetime.datetime.strptime(pub_dt[:10], "%Y-%m-%d").date()
            if start_date <= pub_dt <= end_date and any(kw.lower() in (news.get('title','')+news.get('description','')).lower() for kw in keywords):
                result.append(news)
        except Exception:
            continue
    return result

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("news", news_cmd)],
    states={
        PERIOD: [
            CallbackQueryHandler(period_chosen),
            MessageHandler(filters.TEXT & (~filters.COMMAND), custom_period)
        ],
        KEYWORDS: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), keywords_chosen)
        ],
    },
    fallbacks=[],
)

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å ---
async def scheduled_news_job(context):
    kw_list = [kw['word'] for kw in get_keywords()]
    all_news = search_news(kw_list)
    for src in NEWS_SOURCES:
        feed = feedparser.parse(src)
        for entry in feed.entries:
            for kw in kw_list:
                if kw.lower() in (entry.title + entry.get('summary', '')).lower():
                    news_item = {
                        "title": entry.title,
                        "url": entry.link,
                        "description": entry.get("summary", ""),
                        "category": entry.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        "published_at": entry.get("published", ""),
                    }
                    add_news(
                        news_item['title'],
                        news_item['url'],
                        news_item.get('description', ''),
                        news_item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                        news_item['published_at']
                    )
                    break

async def start_news_scheduler(application):
    application.job_queue.run_repeating(scheduled_news_job, interval=3600, first=0)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_keyword", add_keyword_cmd))
    app.add_handler(CommandHandler("list_keywords", list_keywords_cmd))
    app.add_handler(CommandHandler("add_category", add_category_cmd))
    app.add_handler(CommandHandler("list_categories", list_categories_cmd))
    app.add_handler(CommandHandler("site", site_cmd))
    app.add_handler(conv_handler)
    app.post_init = start_news_scheduler
    logger.info("Starting bot polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
