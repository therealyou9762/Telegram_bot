import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import Config
from database import get_user, update_user, add_to_array, remove_from_array, update_stats, init_db, get_db_connection
from news_api import fetch_news_from_api
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import asyncio

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

scheduler = BackgroundScheduler()


async def check_news_for_user(user_id, application):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = get_user(user_id)
        if not user or not user['keywords']:
            return

        articles = fetch_news_from_api(
            user['keywords'],
            user['language'],
            user['country']
        )

        for article in articles:
            title = article['title'].lower()
            content = (article.get('description') or '').lower()
            full_text = f"{title} {content}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if any(black_word in full_text for black_word in user['blacklist']):
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            is_priority = any(p_keyword.lower() in full_text for p_keyword in user['priority_keywords'])
            has_keyword = any(keyword.lower() in full_text for keyword in user['keywords'])

            if has_keyword or is_priority:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                summary = ""
                # if is_priority and Config.OPENAI_API_KEY:
                #     news_text = f"{article['title']}\n\n{article.get('description', '')}"
                #     summary = generate_summary(news_text)

                message = f"{'üö® ' if is_priority else ''}*{article['title']}*\n"
                if summary:
                    message += f"\n{summary}\n"
                message += f"\n{article['url']}"

                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    for keyword in user['keywords']:
                        if keyword.lower() in full_text:
                            update_stats(user_id, keyword)

                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logger.error(f"Error sending message to {user_id}: {e}")

    except Exception as e:
        logger.error(f"Error checking news for user {user_id}: {e}")


async def scheduled_news_check(application):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()

    for (user_id,) in users:
        await check_news_for_user(user_id, application)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (%s, %s)",
            (user_id, update.effective_user.username)
        )
        conn.commit()
        cursor.close()
        conn.close()

    welcome_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. üóûÔ∏è

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /add_keyword - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    /add_priority - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
    /add_source - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
    /blacklist - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: [–≤–∞—à-—Å–∞–π—Ç]/settings
    """

    await update.message.reply_text(welcome_text)


async def add_keyword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /add_keyword —Å–ª–æ–≤–æ")
        return

    keyword = ' '.join(context.args)
    user_id = update.effective_user.id
    add_to_array(user_id, 'keywords', keyword)
    await update.message.reply_text(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {keyword}")


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã: add_priority, add_source, blacklist, etc.

def setup_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    trigger = IntervalTrigger(hours=1)
    scheduler.add_job(
        lambda: asyncio.run(scheduled_news_check(application)),
        trigger,
        id='news_check'
    )
    scheduler.start()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_keyword", add_keyword))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()