import logging
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, ContextTypes
import feedparser
import apscheduler.schedulers.background
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime
import pytz
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    with sqlite3.connect('news_bot.db') as conn:
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                sources TEXT,
                keywords TEXT,
                priority_keywords TEXT,
                blacklist TEXT,
                language TEXT,
                country TEXT,
                interval INTEGER
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                keyword TEXT,
                count INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        conn.commit()


def get_user(user_id):
    with sqlite3.connect('news_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
    if user:
        # user_id, sources, keywords, priority_keywords, blacklist, language, country, interval
        return {
            'user_id': user[0],
            'sources': user[1].split(';') if user[1] else [],
            'keywords': user[2].split(';') if user[2] else [],
            'priority_keywords': user[3].split(';') if user[3] else [],
            'blacklist': user[4].split(';') if user[4] else [],
            'language': user[5],
            'country': user[6],
            'interval': user[7] or 3600
        }
    return None


def update_user(user_id, field, value):
    with sqlite3.connect('news_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (value, user_id))
        conn.commit()


# ========== –û–ë–†–ê–ë–û–¢–ö–ê RSS ==========
def parse_rss(feed_url, keywords, priority_keywords, blacklist):
    news = []
    feed = feedparser.parse(feed_url)
    for entry in feed.entries:
        title = entry.title.lower()
        link = entry.link
        summary = entry.get('summary', '')
        content = title + " " + summary.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if any(black_word in content for black_word in blacklist):
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        is_priority = any(p_keyword.lower() in content for p_keyword in priority_keywords)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if any(keyword.lower() in content for keyword in keywords) or is_priority:
            news.append({
                'title': entry.title,
                'link': link,
                'priority': is_priority
            })
    return news


# ========== –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ==========
async def scheduled_news_check(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    conn = sqlite3.connect('news_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()

    for (user_id,) in users:
        user = get_user(user_id)
        if not user:
            continue
        all_news = []
        for source in user['sources']:
            news = parse_rss(source, user['keywords'], user['priority_keywords'], user['blacklist'])
            all_news.extend(news)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for item in all_news:
            message = f"{'üö® ' if item['priority'] else ''}{item['title']}\n{item['link']}"
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É


# ========== –ö–û–ú–ê–ù–î–´ –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        conn = sqlite3.connect('news_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO users (user_id, sources, keywords, priority_keywords, blacklist, language, country, interval) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, "", "", "", "", "ru", "ru", 3600)
        )
        conn.commit()
        conn.close()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_source <RSS-—Å—Å—ã–ª–∫–∞> - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "/add_keyword <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/add_priority <—Å–ª–æ–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/blacklist <—Å–ª–æ–≤–æ –∏–ª–∏ –¥–æ–º–µ–Ω> - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )


async def add_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ RSS-—Å—Å—ã–ª–∫—É: /add_source <url>")
        return
    new_source = context.args[0]
    user = get_user(user_id)
    current_sources = user['sources'] if user else []
    if new_source in current_sources:
        await update.message.reply_text("–≠—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return
    current_sources.append(new_source)
    update_user(user_id, 'sources', ';'.join(current_sources))
    await update.message.reply_text(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {new_source}")


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π add_keyword, add_priority, blacklist, stats

# ========== –ó–ê–ü–£–°–ö –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ==========
def main():
    init_db()
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_source", add_source))
    # application.add_handler(CommandHandler("add_keyword", add_keyword))
    # application.add_handler(CommandHandler("add_priority", add_priority))
    # application.add_handler(CommandHandler("blacklist", blacklist))
    # application.add_handler(CommandHandler("stats", stats))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = apscheduler.schedulers.background.BackgroundScheduler()
    trigger = IntervalTrigger(hours=1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        scheduled_news_check,
        trigger=trigger,
        args=[application]
    )
    scheduler.start()

    application.run_polling()


if __name__ == '__main__':
    main()